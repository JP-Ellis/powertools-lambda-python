AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Powertools for AWS Lambda (Python) data masking example

Globals: # https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
  Function:
    Timeout: 5
    Runtime: python3.11
    Tracing: Active
    Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: PowertoolsHelloWorld
          POWERTOOLS_METRICS_NAMESPACE: Powertools
          LOG_LEVEL: INFO
          KMS_KEY_ARN: !GetAtt DataMaskingKMSKey.Arn


Resources:
  # Lambda Function
  # This function is mainly for documentation purposes. In prod, we recommend you split up the encrypt and decrypt
  # calls, so that one function can act as the encryption proxy via HTTP requests, data pipeline, etc.
  # while authorized personnel can call decrypt from scripts or a separate function.
  DataMaskingEncryptFunctionExample:
    Type: AWS::Serverless::Function
    Properties:
      Handler: data_masking_function_example.lambda_handler
      CodeUri: ../src
      Description: Data Masking Function Example
      # Cryptographic operations demand more memory usage.
      # We recommend to allocate a minimum of 1024MB of memory to your Lambda function
      # when utilizing the DataMasking Utility.
      MemorySize: 1024

  # DataMaskingDecryptFunctionExample:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Handler: data_masking_function_decrypt.lambda_handler
  #     CodeUri: ../src
  #     Description: Data Masking Function Example
  #     # Cryptographic operations demand more memory usage.
  #     # We recommend to allocate a minimum of 1024MB of memory to your Lambda function
  #     # when utilizing the DataMasking Utility.
  #     MemorySize: 1024

  # KMS KEY
  DataMaskingKMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: KMS Key for Lambda - DataMasking
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          # To ensure key management security, a KMS Key should have at least one administrator.
          # In this example, the root account is granted administrator permissions.
          # In a production environment, it is recommended to configure specific users or roles for enhanced security.
          - Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: 'kms:*'
            Resource: '*'
          # KMS utilizes resource policies, allowing direct access grant to the Lambda Role on the KMS Key.
          # For more details: https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html
          - Effect: Allow
            Principal:
              AWS: !GetAtt DataMaskingEncryptFunctionExampleRole.Arn  # Permission for the Lambda role
            # These IAM permissions are necessary for the envelope encryption that AWS Encryption SDK uses.
            # Envelope encryption randomly generates a data key and encrypts that data key along with your data,
            # so we encrypt in-memory to prevent too many calls to KMS to reduce latency.
            # For more details: https://docs.aws.amazon.com/encryption-sdk/latest/developer-guide/concepts.html#envelope-encryption
            Action:
              - kms:Decrypt
              - kms:GenerateDataKey
            Resource: "*"
